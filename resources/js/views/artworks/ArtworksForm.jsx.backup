import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  Box,
  Button,
  TextField,
  Typography,
  Grid,
  FormControlLabel,
  Switch,
  Alert,
  CircularProgress,
  IconButton,
  InputAdornment,
  Paper,
  Divider,
  MenuItem,
  Autocomplete,
  Chip
} from '@mui/material';
import { 
  IconArrowLeft, 
  IconUpload, 
  IconX, 
  IconPalette,
  IconCurrencyDollar,
  IconCalendar,
  IconRuler,
  IconTags,
  IconPhoto,
  IconCheck,
  IconStar,
  IconShoppingCart,
  IconUser,
  IconFileText,
  IconTrash
} from '@tabler/icons-react';
import { artworksAPI, artistsAPI } from '../../services/api';

const ArtworksForm = () => {
  const navigate = useNavigate();
  const { slug } = useParams();
  const isEdit = Boolean(slug);
  
  const [loading, setLoading] = useState(false);
  const [submitLoading, setSubmitLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const [artists, setArtists] = useState([]);
  const [existingTags, setExistingTags] = useState([]);
  
  const [formData, setFormData] = useState({
    artist_id: '',
    title: '',
    overview: '',
    description: '',
    status: 'draft',
    year_created: new Date().getFullYear(),
    medium: '',
    dimensions: '',
    price: '',
    is_for_sale: false,
    is_featured: false,
    tags: []
  });

  const [files, setFiles] = useState({
    cover_image: null,
    images: []
  });

  const [previews, setPreviews] = useState({
    cover_image: null,
    images: []
  });

  const [existingImages, setExistingImages] = useState({
    cover_image: null,
    images: []
  });

  // Load initial data
  useEffect(() => {
    loadInitialData();
  }, []);

  // Load artwork data if editing
  useEffect(() => {
    if (isEdit && slug) {
      loadArtwork();
    }
  }, [isEdit, slug]);

  const loadInitialData = async () => {
    try {
      // Load artists
      const artistsResponse = await artistsAPI.getAll({ per_page: 100 });
      setArtists(artistsResponse.data.data || []);
      
      // Load existing tags
      const tagsResponse = await artworksAPI.getAllTags();
      setExistingTags(tagsResponse.data.tags || []);
    } catch (err) {
      console.error('Error loading initial data:', err);
    }
  };

  const loadArtwork = async () => {
    setLoading(true);
    try {
      const response = await artworksAPI.getBySlug(slug);
      const artwork = response.data.work;
      
      setFormData({
        artist_id: artwork.artist_id || '',
        title: artwork.title || '',
        overview: artwork.overview || '',
        description: artwork.description || '',
        status: artwork.status || 'draft',
        year_created: artwork.year_created || new Date().getFullYear(),
        medium: artwork.medium || '',
        dimensions: artwork.dimensions || '',
        price: artwork.price || '',
        is_for_sale: artwork.is_for_sale || false,
        is_featured: artwork.is_featured || false,
        tags: artwork.tags || []
      });

      // Set existing images
      if (artwork.cover_image_url) {
        setExistingImages(prev => ({ ...prev, cover_image: artwork.cover_image_url }));
      }
      if (artwork.image_urls && artwork.image_urls.length > 0) {
        setExistingImages(prev => ({ 
          ...prev, 
          images: artwork.image_urls.map(img => ({
            id: img.id,
            url: img.url,
            thumb: img.thumb
          }))
        }));
      }
    } catch (err) {
      setError('Failed to load artwork data');
      console.error('Error loading artwork:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleCoverImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFiles(prev => ({ ...prev, cover_image: file }));
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviews(prev => ({ ...prev, cover_image: reader.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleImagesChange = (e) => {
    const selectedFiles = Array.from(e.target.files);
    setFiles(prev => ({ ...prev, images: [...prev.images, ...selectedFiles] }));
    
    selectedFiles.forEach(file => {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviews(prev => ({
          ...prev,
          images: [...prev.images, reader.result]
        }));
      };
      reader.readAsDataURL(file);
    });
  };

  const removeCoverImage = () => {
    setFiles(prev => ({ ...prev, cover_image: null }));
    setPreviews(prev => ({ ...prev, cover_image: null }));
    if (isEdit) {
      setExistingImages(prev => ({ ...prev, cover_image: null }));
    }
  };

  const removeImage = (index) => {
    setFiles(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
    setPreviews(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const removeExistingImage = (index) => {
    setExistingImages(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitLoading(true);
    setError('');
    setSuccess('');

    try {
      const submitData = {
        ...formData,
        ...files
      };

      let response;
      if (isEdit) {
        response = await artworksAPI.update(slug, submitData);
      } else {
        response = await artworksAPI.create(submitData);
      }

      setSuccess(`Artwork ${isEdit ? 'updated' : 'created'} successfully!`);
      
      // Redirect after success
      setTimeout(() => {
        navigate('/admin/artworks');
      }, 1500);

    } catch (err) {
      if (err.response?.data?.errors) {
        const errorMessages = Object.values(err.response.data.errors).flat();
        setError(errorMessages.join(', '));
      } else {
        setError(`Failed to ${isEdit ? 'update' : 'create'} artwork`);
      }
      console.error('Error submitting form:', err);
    } finally {
      setSubmitLoading(false);
    }
  };

  if (loading) {
    return (
      <Paper sx={{ p: 4 }}>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
          <CircularProgress />
        </Box>
      </Paper>
    );
  }

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>
      {/* Simple Header */}
      <Box mb={3}>
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <IconButton onClick={() => navigate('/admin/artworks')} size="small">
            <IconArrowLeft />
          </IconButton>
          <Typography variant="h4" fontWeight={600}>
            {isEdit ? 'Edit Artwork' : 'Create New Artwork'}
          </Typography>
        </Box>
        <Typography variant="body2" color="text.secondary">
          {isEdit ? 'Update artwork information and media' : 'Add a new artwork to your gallery'}
        </Typography>
      </Box>

      {/* Alerts */}
      {error && (
        <Alert severity="error" onClose={() => setError('')} sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}
      {success && (
        <Alert severity="success" icon={<IconCheck />} sx={{ mb: 3 }}>
          {success}
        </Alert>
      )}

      <form onSubmit={handleSubmit}>
        <Grid container spacing={3}>
          {/* Left Column - Form Fields */}
          <Grid item xs={12} md={8}>
            <Paper sx={{ p: 3 }}>
              {/* Basic Information */}
              <Typography variant="h6" gutterBottom sx={{ mb: 2.5 }}>
                Basic Information
              </Typography>
              <Grid container spacing={3} sx={{ mb: 4 }}>
                <Grid item xs={12} md={6}>
                  <TextField
                    select
                    fullWidth
                    label="Artist"
                    name="artist_id"
                    value={formData.artist_id}
                    onChange={handleInputChange}
                    required
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconUser size={20} />
                        </InputAdornment>
                      ),
                    }}
                  >
                    <MenuItem value="">
                      <em>Select an artist</em>
                    </MenuItem>
                    {artists.map((artist) => (
                      <MenuItem key={artist.id} value={artist.id}>
                        {artist.artist_name}
                      </MenuItem>
                    ))}
                  </TextField>
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    select
                    fullWidth
                    label="Status"
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                    required
                  >
                    <MenuItem value="draft">Draft</MenuItem>
                    <MenuItem value="published">Published</MenuItem>
                    <MenuItem value="archived">Archived</MenuItem>
                  </TextField>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Artwork Title"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    required
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconPalette size={20} />
                        </InputAdornment>
                      ),
                    }}
                    placeholder="Enter the artwork title"
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Overview"
                    name="overview"
                    value={formData.overview}
                    onChange={handleInputChange}
                    multiline
                    rows={3}
                    placeholder="Brief description of the artwork..."
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Description"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    multiline
                    rows={4}
                    placeholder="Detailed description of the artwork..."
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconFileText size={20} />
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={formData.is_featured}
                        onChange={(e) => setFormData(prev => ({ ...prev, is_featured: e.target.checked }))}
                        color="primary"
                      />
                    }
                    label="Featured Artwork"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={formData.is_for_sale}
                        onChange={(e) => setFormData(prev => ({ ...prev, is_for_sale: e.target.checked }))}
                        color="primary"
                      />
                    }
                    label="Available for Sale"
                  />
                </Grid>
              </Grid>

              <Divider sx={{ my: 3 }} />

              {/* Artwork Details */}
              <Typography variant="h6" gutterBottom sx={{ mb: 2.5 }}>
                Artwork Details
              </Typography>
              <Grid container spacing={3} sx={{ mb: 4 }}>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="Year Created"
                    name="year_created"
                    type="number"
                    value={formData.year_created}
                    onChange={handleInputChange}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconCalendar size={20} />
                        </InputAdornment>
                      ),
                      inputProps: { min: 1900, max: new Date().getFullYear() + 1 }
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="Medium"
                    name="medium"
                    value={formData.medium}
                    onChange={handleInputChange}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconPalette size={20} />
                        </InputAdornment>
                      ),
                    }}
                    placeholder="Oil on canvas, Digital art..."
                  />
                </Grid>
                <Grid item xs={12} md={4}>
                  <TextField
                    fullWidth
                    label="Dimensions"
                    name="dimensions"
                    value={formData.dimensions}
                    onChange={handleInputChange}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconRuler size={20} />
                        </InputAdornment>
                      ),
                    }}
                    placeholder="24 x 36 inches"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Price"
                    name="price"
                    type="number"
                    value={formData.price}
                    onChange={handleInputChange}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <IconCurrencyDollar size={20} />
                        </InputAdornment>
                      ),
                      inputProps: { min: 0, step: 0.01 }
                    }}
                    placeholder="0.00"
                  />
                </Grid>
                <Grid item xs={12} md={6}>
                  <Autocomplete
                    multiple
                    freeSolo
                    options={existingTags}
                    value={formData.tags}
                    onChange={(event, newValue) => {
                      setFormData(prev => ({ ...prev, tags: newValue }));
                    }}
                    renderTags={(value, getTagProps) =>
                      value.map((option, index) => (
                        <Chip variant="outlined" label={option} {...getTagProps({ index })} key={index} />
                      ))
                    }
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        label="Tags"
                        placeholder="Add tags..."
                        InputProps={{
                          ...params.InputProps,
                          startAdornment: (
                            <InputAdornment position="start">
                              <IconTags size={20} />
                            </InputAdornment>
                          ),
                        }}
                      />
                    )}
                  />
                </Grid>
              </Grid>
            </Paper>
          </Grid>

          {/* Right Column - Media Upload */}
          <Grid item xs={12} md={4}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 2.5 }}>
                  Cover Image
                </Typography>
                <Box display="flex" flexDirection="column" alignItems="center" gap={2.5}>
                  <Box
                    sx={{
                      width: 200,
                      height: 200,
                      borderRadius: 2,
                      border: '3px solid',
                      borderColor: 'divider',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      overflow: 'hidden',
                      backgroundColor: 'background.default'
                    }}
                  >
                    {(previews.cover_image || existingImages.cover_image) ? (
                      <img
                        src={previews.cover_image || existingImages.cover_image}
                        alt="Cover"
                        style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                      />
                    ) : (
                      <IconPhoto size={60} style={{ color: '#ccc' }} />
                    )}
                  </Box>
                  <Box display="flex" gap={1.5}>
                    <Button
                      variant="outlined"
                      component="label"
                      startIcon={<IconUpload size={18} />}
                    >
                      Upload Cover
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={handleCoverImageChange}
                      />
                    </Button>
                    {(previews.cover_image || existingImages.cover_image) && (
                      <IconButton onClick={removeCoverImage} color="error">
                        <IconTrash size={18} />
                      </IconButton>
                    )}
                  </Box>
                </Box>
              </Paper>

              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 2.5 }}>
                  Additional Images
                </Typography>
                
                <Button
                  variant="outlined"
                  component="label"
                  fullWidth
                  startIcon={<IconPhoto size={18} />}
                  sx={{ mb: 3, borderStyle: 'dashed', py: 1.5 }}
                >
                  Add Images
                  <input
                    type="file"
                    hidden
                    multiple
                    accept="image/*"
                    onChange={handleImagesChange}
                  />
                </Button>

                {/* Existing Images */}
                {existingImages.images.length > 0 && (
                  <Box mb={3}>
                    <Typography variant="body2" color="text.secondary" sx={{ mb: 1.5, fontWeight: 500 }}>
                      Current Images
                    </Typography>
                    <Box display="flex" flexWrap="wrap" gap={1.5}>
                      {existingImages.images.map((image, index) => (
                        <Box key={index} sx={{ position: 'relative' }}>
                          <img 
                            src={image.thumb || image.url} 
                            alt={`Image ${index + 1}`}
                            style={{ 
                              width: 70, 
                              height: 70, 
                              objectFit: 'cover', 
                              borderRadius: 8,
                              border: '2px solid #f0f0f0'
                            }}
                          />
                          <IconButton
                            size="small"
                            onClick={() => removeExistingImage(index)}
                            sx={{ 
                              position: 'absolute', 
                              top: -8, 
                              right: -8, 
                              bgcolor: 'background.paper',
                              boxShadow: 1,
                              '&:hover': { bgcolor: 'error.light', color: 'white' }
                            }}
                          >
                            <IconX size={14} />
                          </IconButton>
                        </Box>
                      ))}
                    </Box>
                  </Box>
                )}

                {/* New Images */}
                {previews.images.length > 0 && (
                  <Box>
                    <Typography variant="body2" color="primary.main" sx={{ mb: 1.5, fontWeight: 500 }}>
                      New Images to Upload
                    </Typography>
                    <Box display="flex" flexWrap="wrap" gap={1.5}>
                      {previews.images.map((preview, index) => (
                        <Box key={index} sx={{ position: 'relative' }}>
                          <img 
                            src={preview} 
                            alt={`New ${index + 1}`}
                            style={{ 
                              width: 70, 
                              height: 70, 
                              objectFit: 'cover', 
                              borderRadius: 8,
                              border: '2px solid #2196f3'
                            }}
                          />
                          <IconButton
                            size="small"
                            onClick={() => removeImage(index)}
                            sx={{ 
                              position: 'absolute', 
                              top: -8, 
                              right: -8, 
                              bgcolor: 'background.paper',
                              boxShadow: 1,
                              '&:hover': { bgcolor: 'error.light', color: 'white' }
                            }}
                          >
                            <IconX size={14} />
                          </IconButton>
                        </Box>
                      ))}
                    </Box>
                  </Box>
                )}
              </Paper>
            </Box>
          </Grid>
        </Grid>

        {/* Form Actions */}
        <Paper sx={{ p: 3, mt: 4 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="body2" color="text.secondary">
              {isEdit ? 'Make sure all information is accurate before updating.' : 'All fields marked with * are required.'}
            </Typography>
            <Box display="flex" gap={2}>
              <Button
                variant="outlined"
                onClick={() => navigate('/admin/artworks')}
                disabled={submitLoading}
                size="large"
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="contained"
                disabled={submitLoading}
                size="large"
              >
                {submitLoading ? (
                  <>
                    <CircularProgress size={20} sx={{ mr: 1, color: 'white' }} />
                    {isEdit ? 'Updating...' : 'Creating...'}
                  </>
                ) : (
                  <>
                    {isEdit ? 'Update Artwork' : 'Create Artwork'}
                  </>
                )}
              </Button>
            </Box>
          </Box>
        </Paper>
      </form>
    </Box>
  );
};

export default ArtworksForm;