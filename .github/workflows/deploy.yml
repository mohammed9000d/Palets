name: Deploy to Production Server

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            # Navigate to project directory
            cd /var/www/Palets || { echo "‚ùå Project directory not found!"; exit 1; }
            
            # Show current status
            echo "üìç Current status:"
            echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
            echo "Commit: $(git rev-parse --short HEAD)"
            
            # Fetch latest changes
            echo "üì• Fetching latest changes..."
            git fetch --all --tags --prune --force
            
            # Reset to latest to ensure clean state (handles modified files)
            echo "üîÑ Resetting to latest remote state..."
            git reset --hard origin/main || git reset --hard origin/master
            
            # Verify update
            echo "‚úÖ Updated to commit: $(git rev-parse --short HEAD)"
            
            # Install PHP dependencies
            echo "üì¶ Installing PHP dependencies..."
            composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
            
            # Install Node dependencies with legacy peer deps flag
            echo "üì¶ Installing Node dependencies..."
            npm ci --legacy-peer-deps
            
            # Clean old build artifacts
            echo "üßπ Cleaning old build artifacts..."
            rm -rf public/assets/
            rm -f public/index.html
            rm -rf public/.vite/
            rm -rf public/build/
            rm -rf node_modules/.vite
            
            # Build frontend assets
            echo "üî® Building frontend assets..."
            NODE_OPTIONS="--max-old-space-size=4096" npm run build
            
            # Verify build succeeded
            if [ ! -f "public/build/manifest.json" ]; then
                echo "‚ùå ERROR: Build failed - manifest.json not found!"
                exit 1
            fi
            echo "‚úÖ Build successful!"
            
            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            php artisan migrate --force
            
            # Clear and cache configurations
            echo "üîÑ Optimizing application..."
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            php artisan event:clear 2>/dev/null || true
            php artisan optimize:clear 2>/dev/null || true
            php artisan responsecache:clear 2>/dev/null || true
            
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan optimize
            
            # Set proper permissions
            echo "üîí Setting permissions..."
            chown -R www-data:www-data /var/www/Palets
            chmod -R 755 /var/www/Palets
            chmod -R 775 /var/www/Palets/storage
            chmod -R 775 /var/www/Palets/bootstrap/cache
            
            # Restart services
            echo "‚ôªÔ∏è Restarting services..."
            systemctl restart php8.2-fpm
            systemctl restart nginx
            
            # Clear any opcache if enabled
            php artisan opcache:clear 2>/dev/null || echo "‚ÑπÔ∏è OPcache not enabled"
            
            echo ""
            echo "=================================="
            echo "‚úÖ Deployment completed successfully!"
            echo "üéâ Application is now running!"
            echo "=================================="
            echo "Deployed commit: $(git log -1 --pretty=format:'%h - %s')"

      - name: Deployment Notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment to production was successful!"
          else
            echo "‚ùå Deployment to production failed!"
          fi
